import { AuthClient } from "@dfinity/auth-client";

import { Actor, Identity } from "@dfinity/agent";
import { useEffect, useState } from "react";
import {
  canisterId,
  createActor,
} from "../../declarations/3lance_frontend_canister";
import { defaultOptions } from "../config/AuthConfig";

export const useAuthClient = (options = defaultOptions) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [authClient, setAuthClient] = useState<AuthClient>();
  const [identity, setIdentity] = useState<Identity>();
  const [principal, setPrincipal] = useState<any>();
  const [whoamiActor, setWhoamiActor] = useState<Actor>();

  useEffect(() => {
    // Initialize AuthClient
    AuthClient.create(options.createOptions).then(async (client) => {
      updateClient(client);
    });
  }, [options.createOptions]);

  const login = () => {
    if (!authClient) {
      console.error("authClient not initialized");
      return;
    }
    authClient.login({
      ...options.loginOptions,
      onSuccess: () => {
        updateClient(authClient);
      },
    });
  };

  async function updateClient(client: AuthClient) {
    // Check if the user is authenticated already, and verify identity is true
    const isAuthenticated = await client.isAuthenticated();
    setIsAuthenticated(isAuthenticated);

    const identity = client.getIdentity();
    setIdentity(identity);

    const principal = identity.getPrincipal();
    setPrincipal(principal);

    setAuthClient(client);
    // TODO: createActor needs to be defined in /declarations/whoami/index.ts
    // should be auto generated by the DFX CLI
    const actor = createActor(canisterId, {
      agentOptions: {
        identity,
      },
    });

    setWhoamiActor(actor);
  }

  async function logout() {
    if (!authClient) return;
    await authClient?.logout();
    await updateClient(authClient);
  }

  return {
    isAuthenticated,
    login,
    logout,
    authClient,
    identity,
    principal,
    whoamiActor,
  };
};
